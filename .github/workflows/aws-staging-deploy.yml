name: AWS Deploy Workflow

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION: ${{ secrets.AWS_REGION || 'ap-northeast-1' }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
      LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      VITE_APP_NAME: "andTopic"
      VITE_APP_DESCRIPTION: "The best site ever"
      VITE_BACKEND_ENABLED: true
      VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      VITE_WEBSOCKET_URL: ${{ secrets.VITE_WEBSOCKET_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Tiptap認証を設定
      - name: Setup NPM Authentication
        run: |
          cat > ~/.npmrc << EOL
          @tiptap-pro:registry=https://registry.tiptap.dev/
          //registry.tiptap.dev/:_authToken=${TIPTAP_AUTH_TOKEN}
          EOL
        env:
          TIPTAP_AUTH_TOKEN: ${{ secrets.TIPTAP_AUTH_TOKEN }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # Step1: npm i & npm run build at apps/
      - name: Install dependencies and build
        run: |
          cd apps
          # Copy npmrc to project directory
          cp ~/.npmrc ./.npmrc
          npm install
          npm run build
      
      # Step2: Copy files to server build directory
      - name: Copy files to server build directory
        run: |
          cp apps/package.json apps/build/server/
          cp apps/package-lock.json apps/build/server/

          # Fix path to start script
          sed -i 's/"start": "react-router-serve \.\/build\/server\/index\.js"/"start": "react-router-serve \.\/index\.js"/g' apps/build/server/package.json
          
          # Generate .npmrc
          cat > apps/build/server/.npmrc << EOL
          @tiptap-pro:registry=https://registry.tiptap.dev/
          //registry.tiptap.dev/:_authToken=${{ secrets.TIPTAP_AUTH_TOKEN }}
          EOL
          
          # Process auth.mock.yaml - generate from secret or copy existing file
          if [ -n "${{ secrets.AUTH_MOCK_YAML }}" ]; then
            echo "${{ secrets.AUTH_MOCK_YAML }}" > apps/build/server/auth.mock.yaml
          elif [ -f apps/auth.mock.yaml ]; then
            cp apps/auth.mock.yaml apps/build/server/
          fi
      
      # Step3: Dependency installation in server build directory
      - name: Install server dependencies
        run: |
          cd apps/
          npm install --prefix build/server/ --omit=dev

      # Step4: Build the Docker container and push it to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
            mask-password: true

      # Mask Docker credentials after login
      - name: Mask Docker credentials
        if: steps.login-ecr.outputs.docker-password != ''
        run: |
          echo "::add-mask::${{ steps.login-ecr.outputs.docker-password }}"
      
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f deploy/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
      # Step5: Delete old ECR images
      - name: Clean old ECR images
        run: |
          # List images in repository
          IMAGES=$(aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY_NAME }} --query 'sort_by(imageDetails,& imagePushedAt)[*].{ImageDigest:imageDigest,ImageTags:imageTags}' --output json)
          
          # Get a digest of the latest images (the ones just pushed)
          LATEST_IMAGE_DIGEST=$(echo $IMAGES | jq -r '.[-1].ImageDigest')
          
          # Loop through all images and delete old ones
          echo $IMAGES | jq -c '.[]' | while read -r image; do
            IMAGE_DIGEST=$(echo $image | jq -r '.ImageDigest')
            
            # Skip to latest image
            if [ "$IMAGE_DIGEST" != "$LATEST_IMAGE_DIGEST" ]; then
              echo "Deleting image with digest: $IMAGE_DIGEST"
              aws ecr batch-delete-image --repository-name ${{ env.ECR_REPOSITORY_NAME }} --image-ids imageDigest=$IMAGE_DIGEST
            fi
          done
      
      # Step6: Deploy the new image to Lambda
      - name: Update Lambda function
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --image-uri ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_NAME }}:latest
      
      # Step7: Deploy client files to S3
      - name: Deploy to S3
        run: |
          aws s3 sync apps/build/client/ s3://${{ env.S3_BUCKET_NAME }}/
